@256
D=A
@SP
M=D
@Sys.initRET0
D=A
@SP
A=M
M=D
@SP
M=M+1
// pushed D to stack 
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
// pushed D to stack 
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
// pushed D to stack 
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// pushed D to stack 
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
// pushed D to stack 
@SP
D=M
@LCL
M=D
@SP
D=M
@5
D=D-A
@LCL
M=D
@Sys.init
0;JMP
//Main
(Main.fibonacci)
@R2
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// pushed D to stack 
// completed a push 
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// pushed D to stack 
// completed a push 
@SP
M=M-1
A=M
D=M
// popped stack to D 
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@JMPPOINT0
D;JLT
@SP
A=M
M=0
(JMPPOINT0)
@SP
M=M+1
@SP
M=M-1
A=M
D=M
// popped stack to D 
@Main.fibonacci.IF_TRUE
D;JNE
@Main.fibonacci.IF_FALSE
0;JMP
(Main.fibonacci.IF_TRUE)
@R2
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// pushed D to stack 
// completed a push 
@LCL
D=M
@R14
M=D
@R14
D=M
@5
D=D-A
A=D
D=M
@R15
M=D
@SP
M=M-1
A=M
D=M
// popped stack to D 
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@R14
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@R14
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@R14
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@R15
A=M
0;JMP
(Main.fibonacci.IF_FALSE)
@R2
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// pushed D to stack 
// completed a push 
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// pushed D to stack 
// completed a push 
@SP
M=M-1
A=M
D=M
// popped stack to D 
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
@Main.fibonacciRET1
D=A
@SP
A=M
M=D
@SP
M=M+1
// pushed D to stack 
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
// pushed D to stack 
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
// pushed D to stack 
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// pushed D to stack 
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
// pushed D to stack 
@SP
D=M
@LCL
M=D
@SP
D=M
@6
D=D-A
@LCL
M=D
@Main.fibonacci
0;JMP
@R2
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// pushed D to stack 
// completed a push 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// pushed D to stack 
// completed a push 
@SP
M=M-1
A=M
D=M
// popped stack to D 
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
@Main.fibonacciRET2
D=A
@SP
A=M
M=D
@SP
M=M+1
// pushed D to stack 
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
// pushed D to stack 
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
// pushed D to stack 
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// pushed D to stack 
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
// pushed D to stack 
@SP
D=M
@LCL
M=D
@SP
D=M
@6
D=D-A
@LCL
M=D
@Main.fibonacci
0;JMP
@SP
M=M-1
A=M
D=M
// popped stack to D 
@SP
M=M-1
@SP
A=M
M=M+D
@SP
M=M+1
@LCL
D=M
@R14
M=D
@R14
D=M
@5
D=D-A
A=D
D=M
@R15
M=D
@SP
M=M-1
A=M
D=M
// popped stack to D 
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@R14
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@R14
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@R14
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@R15
A=M
0;JMP
//Sys
(Sys.init)
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// pushed D to stack 
// completed a push 
@Main.fibonacciRET3
D=A
@SP
A=M
M=D
@SP
M=M+1
// pushed D to stack 
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
// pushed D to stack 
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
// pushed D to stack 
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// pushed D to stack 
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
// pushed D to stack 
@SP
D=M
@LCL
M=D
@SP
D=M
@6
D=D-A
@LCL
M=D
@Main.fibonacci
0;JMP
(Sys.init.WHILE)
@Sys.init.WHILE
0;JMP
